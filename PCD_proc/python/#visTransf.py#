import numpy as np
import math
import matplotlib.pyplot as pl
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.patches import FancyArrowPatch
from mpl_toolkits.mplot3d import proj3d

class Arrow3D(FancyArrowPatch):
    def __init__(self, xs, ys, zs, *args, **kwargs):
        FancyArrowPatch.__init__(self, (0,0), (0,0), *args, **kwargs)
        self._verts3d = xs, ys, zs

    def draw(self, renderer):
        xs3d, ys3d, zs3d = self._verts3d
        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)
        self.set_positions((xs[0],ys[0]),(xs[1],ys[1]))
        FancyArrowPatch.draw(self, renderer)

#from transformations.py
def rotation_from_matrix(matrix):
    R = np.array(matrix, dtype=np.float64, copy=False)
    R33 = R[:3, :3]
    # direction: unit eigenvector of R33 corresponding to eigenvalue of 1
    l, W = np.linalg.eig(R33.T)
    i = np.where(abs(np.real(l) - 1.0) < 1e-5)[0]
    if not len(i):
        raise ValueError("no unit eigenvector corresponding to eigenvalue 1")
    direction = np.real(W[:, i[-1]]).squeeze()
    # point: unit eigenvector of R33 corresponding to eigenvalue of 1
    l, Q = np.linalg.eig(R)
    i = np.where(abs(np.real(l) - 1.0) < 1e-5)[0]
    if not len(i):
        raise ValueError("no unit eigenvector corresponding to eigenvalue 1")
    point = np.real(Q[:, i[-1]]).squeeze()
    point /= point[3]
    # rotation angle depending on direction
    cosa = (np.trace(R33) - 1.0) / 2.0
    if abs(direction[2]) > 1e-5:
        sina = (R[1, 0] + (cosa-1.0)*direction[0]*direction[1]) / direction[2]
    elif abs(direction[1]) > 1e-5:
        sina = (R[0, 2] + (cosa-1.0)*direction[0]*direction[2]) / direction[1]
    else:
        sina = (R[2, 1] + (cosa-1.0)*direction[1]*direction[2]) / direction[0]
    angle = math.atan2(sina, cosa)
    return angle, direction, point

def get_hs(fname,N=100,s=1,i0=0,saveit=False):
   dirs=[]
   angles=[]
   ps=[]
   Hs=[]
   for k in range(i0+s,i0+N): 
      H=np.fromfile(fname+'%s_%s.transform'%(k-s,k),dtype=np.float32).reshape([4,4])
      angle, direction, point=rotation_from_matrix(H)
      angles.append(angle)
      dirs.append(direction)
      ps.append(point)
      Hs.append(H)
   if saveit: np.save(saveit,H)
   return np.array(angles), np.array(dirs), np.array(ps), np.array(Hs)

def transf(x,tr):
   return tr[:3,:3]*x+tr[3,:3]

def plot_arrows(ax,xyz,color='k'):
   for k in range(xyz.shape[0]):
      ax.plot(xyz[k,0], xyz[k,1], xyz[k,2], color=color, alpha=0.8, lw=3) 
   pl.draw()

def plot_traj(fname,N,s,i0=0,color='k',drawit=False):
   #fname+='%s/'%s
   a,d,p,h=get_hs(fname,N,s)

   xyz=np.zeros([N/s-i0,3,2])
   xyz[0,:,:]=[[1,1],[1,1],[1,0]]

   for k in range(N/s-1-i0):
      print s,k
      xyz[k+1]=np.dot(h[i0+s*k][:3,:3],xyz[k])+h[i0+s*k][:3,3].repeat(2).reshape([3,2])

   #if drawit: plot_arrows(ax,xyz,color)
   return xyz 

N=100
s=3

fname='/home/kodda/Dropbox/p2pflab/lettuceScan2/data/17.03.22/arabidopsis_square/transf/'
a,d,p,h=get_hs(fname,45,1)


"""
i0s=[0,0,1,0,1,2]
s_s=[1,2,2,3,3,3]
a_s=[]
for k in range(len(i0s)):
   a,d,p,h=get_hs(fname,100,k+1)
   a_s.append(a)

i0s=[0,0,1,0,1,2]
s_s=[1,2,2,3,3,3]
for k in range(len(i0s)):
   i0=i0s[k]+0
   s=s_s[k]
   r=np.arange(i0,N,s)
   xyz=plot_traj(fname,N,s,i0)
   pl.plot(xyz[:,0,0],xyz[:,1,0])


a_s=[]
d_s=[]
p_s=[]
h_s=[]

for k in range(1,9):
   fname='/home/kodda/Dropbox/p2pflab/lettuceScan/data/plant/transf_pw_%s/'%k
   a,d,p,h=get_hs(fname,100,k)
   a_s.append(a)
   d_s.append(d)
   p_s.append(p)
   h_s.append(h)

icp1=np.loadtxt('/home/kodda/Dropbox/p2pflab/lettuceScan/features/data/pcd/icp.txt')
"""
